#!/usr/bin/env python3
"""
Unit and regression test for the python_696_project package.
"""

# Import package, test suite, and other packages as needed
import errno
import os
import sys
import unittest
from contextlib import contextmanager
from io import StringIO
import logging
import python_696_project.pd_clinical.pd_clinical_outcome_stats as my_script

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)
DISABLE_REMOVE = logger.isEnabledFor(logging.DEBUG)

CURRENT_DIR = os.path.dirname(__file__)
TEST_DATA_DIR = os.path.join(CURRENT_DIR, 'test_data')
MAIN_DIR = os.path.join(CURRENT_DIR, '..')
PROJ_DIR = os.path.join(MAIN_DIR, 'pd_clinical')
DATA_DIR = os.path.join(PROJ_DIR, 'data')
SAMPLE_DATA_FILE_LOC = os.path.join(DATA_DIR, 'co-relation_data.xlsx')

# Assumes running tests from the main directory
DEF_XLSX_OUT = os.path.join(MAIN_DIR, 'wilcoxon_test_out.txt')
DEF_PNG_OUT = os.path.join(MAIN_DIR, 'co_relations.png')


def silent_remove(filename, disable=False):
    """
    Removes the target file name, catching and ignoring errors that indicate that the
    file does not exist.

    @param filename: The file to remove.
    @param disable: boolean to flag if want to disable removal
    """
    if not disable:
        try:
            os.remove(filename)
        except OSError as e:
            if e.errno != errno.ENOENT:
                raise


class TestMain(unittest.TestCase):
    # These tests make sure that the program can run properly from main
    def testSampleData(self):
        # Checks that runs with defaults and that files are created
        test_input = ["-c", SAMPLE_DATA_FILE_LOC]
        try:
            if logger.isEnabledFor(logging.DEBUG):
                my_script.main(test_input)
            # checks that the expected message is sent to standard out
            with capture_stdout(my_script.main, test_input) as output:
                self.assertTrue("co-relation_data.xlsx" in output)
                self.assertTrue(os.path.isfile("wilcoxon_test_out.txt"))
                self.assertTrue(os.path.isfile("co_relations.png"))
        finally:
            silent_remove(DEF_XLSX_OUT, disable=DISABLE_REMOVE)
            silent_remove(DEF_PNG_OUT, disable=DISABLE_REMOVE)


class TestMainFailWell(unittest.TestCase):
    """ Testing missing file exception and require input format """

    def testMissingFile(self):
        test_input = ["-c", "random_file.xlsx"]
        if logger.isEnabledFor(logging.DEBUG):
           my_script.main(test_input)
        with capture_stderr(my_script.main, test_input) as output:
            self.assertTrue("random_file.xlsx" in output)

    def testDataDiffSheets(self):
        input_file = os.path.join(TEST_DATA_DIR, "test_excel3_wrong_sheets.xlsx")
        test_input = ["-c", input_file]
        if logger.isEnabledFor(logging.DEBUG):
            my_script.main(test_input)
        with capture_stderr(my_script.main, test_input) as output:
            self.assertTrue("Given excel input should have sheets" in output)


class TestDataAnalysis(unittest.TestCase):
    """ Testing accuracy and reproducibility using two sample datasets """
    def testSampleData(self):
        # Tests that the np array generated by the data_analysis function matches saved expected results

        input_file = os.path.join(TEST_DATA_DIR, "test_excel1.xlsx")
        test_input = ["-c", input_file]
        my_script.main(test_input)
        with open(TEST_DATA_DIR + '\wilcoxon_test_out1.txt', 'r') as e:
            expected_results = e.readlines()
            with open('wilcoxon_test_out.txt', 'r') as a:
                analysis_results = a.readlines()
                self.assertEqual(expected_results, analysis_results)

    def testSampleData2(self):
        # A second check, with slightly different values, of the data_analysis function
        input_file = os.path.join(TEST_DATA_DIR, "test_excel2.xlsx")
        test_input = ["-c", input_file]
        my_script.main(test_input)
        with open(TEST_DATA_DIR + '\wilcoxon_test_out2.txt', 'r') as e:
            expected_results = e.readlines()
            with open('wilcoxon_test_out.txt', 'r') as a:
                analysis_results = a.readlines()
                self.assertEqual(expected_results, analysis_results)


# Utility functions

# From http://schinckel.net/2013/04/15/capture-and-test-sys.stdout-sys.stderr-in-unittest.testcase/
@contextmanager
def capture_stdout(command, *args, **kwargs):
    # pycharm doesn't know six very well, so ignore the false warning
    # noinspection PyCallingNonCallable
    out, sys.stdout = sys.stdout, StringIO()
    command(*args, **kwargs)
    sys.stdout.seek(0)
    yield sys.stdout.read()
    sys.stdout = out


@contextmanager
def capture_stderr(command, *args, **kwargs):
    # pycharm doesn't know six very well, so ignore the false warning
    # noinspection PyCallingNonCallable
    err, sys.stderr = sys.stderr, StringIO()
    command(*args, **kwargs)
    sys.stderr.seek(0)
    yield sys.stderr.read()
    sys.stderr = err
